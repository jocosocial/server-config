---
- name: create directories
  file:
    path: "{{ item }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    state: directory
  become: yes
  with_items:
    - "{{ twitarr_root_dir }}"
    - "{{ twitarr_backups_dir }}"
    - "{{ twitarr_backups_dir }}/images"
    - "{{ twitarr_backups_dir }}/database"
    - "{{ twitarr_backups_dir }}/buildcache"
    - "{{ twitarr_backups_dir }}/redis"
    - "{{ twitarr_backups_dir }}/prometheus"

- name: create log directory
  file:
    path: "{{ twitarr_logs_dir }}"
    owner: "{{ ansible_user_id }}"
    group: adm
    state: directory
    mode: 0775
  become: yes
  notify: restart rsyslog

- import_role:
    name: logrotate
    tasks_from: twitarr

- name: link coredump directory
  file:
    src: /var/lib/systemd/coredump/
    dest: "{{ twitarr_coredump_dir }}"
    state: link

- name: install development dependencies
  package:
    name:
      - libgd-dev
      - libjpeg-dev
    state: present
  become: yes

- name: clone microkaraoke
  git:
    repo: "https://github.com/jocosocial/microkaraoke_songs"
    dest: "{{ twitarr_microkaraoke_dir }}"
    version: main

- name: clone source
  git:
    repo: "https://github.com/jocosocial/swiftarr"
    dest: "{{ twitarr_src_dir }}"
    version: master

- name: clone deploy
  git:
    repo: "github.com:jocosocial/twitarr-prod"
    dest: "{{ twitarr_deploy_dir }}"
    key_file: "/home/{{ ansible_user_id }}/.ssh/deploy"

- name: configure source repo
  ini_file:
    path: "{{ twitarr_src_dir }}/.git/config"
    section: receive
    option: denyCurrentBranch
    value: updateInstead

- name: configure deploy repo
  ini_file:
    path: "{{ twitarr_deploy_dir }}/.git/config"
    section: receive
    option: denyCurrentBranch
    value: updateInstead

- name: configure microkaraoke repo
  ini_file:
    path: "{{ twitarr_microkaraoke_dir }}/.git/config"
    section: receive
    option: denyCurrentBranch
    value: updateInstead

- name: link production config for builds
  file:
    src: "{{ twitarr_deploy_dir }}/production.env"
    dest: "{{ twitarr_src_dir }}/Sources/swiftarr/seeds/Private Swiftarr Config/production.env"
    state: link

- name: install python dependencies
  pip:
    requirements: "{{ twitarr_src_dir }}/requirements.txt"
  become: yes

- name: create volumes
  docker_volume:
    name: "{{ item }}"
    state: present
  with_items:
    - images
    - pgdata
    - redisdata
    - prometheus
    - alertmanager
    - grafana
    - senddata

# Ensure these are up to date with swiftarr's Dockerfile
- name: pull build images
  docker_image:
    source: pull
    repository: "{{ item.repo }}"
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
  with_items:
    - repo: docker.io/library
      name: swift
      tag: 6.0-jammy
    - repo: docker.io/library
      name: ubuntu
      tag: 22.04
